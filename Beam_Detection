import time
try:
    import board
    import busio
except ImportError as e:
    raise SystemExit("Required libraries not found: {}".format(e))

try:
    import adafruit_vl53l1x
except ImportError:
    adafruit_vl53l1x = None

try:
    import adafruit_vl53l0x
except ImportError:
    adafruit_vl53l0x = None

BREAK_DISTANCE_MM = 200
MIN_BREAK_INTERVAL = 3.0


def initialize_sensor(i2c):
    if adafruit_vl53l1x is not None:
        try:
            sensor = adafruit_vl53l1x.VL53L1X(i2c)
            sensor.distance_mode = 1  # short range mode
            sensor.timing_budget = 100
            sensor.start_ranging()
            print("VL53L1X sensor detected")
            return sensor
        except Exception:
            pass
    if adafruit_vl53l0x is not None:
        try:
            sensor = adafruit_vl53l0x.VL53L0X(i2c)
            print("VL53L0X sensor detected")
            return sensor
        except Exception:
            pass
    raise RuntimeError("No supported VL53 sensor found")


def main():
    i2c = busio.I2C(board.SCL, board.SDA)
    while not i2c.try_lock():
        pass
    try:
        sensor = initialize_sensor(i2c)
    finally:
        i2c.unlock()

    count = 0
    last_break = 0
    print("Monitoring distance...")
    while True:
        distance = sensor.distance
        print(f"Distance: {distance} mm")
        if distance < BREAK_DISTANCE_MM:
            now = time.time()
            if now - last_break >= MIN_BREAK_INTERVAL:
                count += 1
                last_break = now
                print(f"Break detected! Count: {count}")
        time.sleep(0.1)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nExiting.")
